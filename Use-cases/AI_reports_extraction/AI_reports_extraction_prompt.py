"""
Auto-generated Extraction Prompt with Embedded Models
Generated by Knowledge Extraction Agent
This file contains a complete, self-contained extraction prompt system.
"""

EXTRACTION_PROMPT = """
TASK: AI reports extraction

EXTRACTION TASK:
Extracting structured information from unstructured AI consultancy documents

EMBEDDED PYDANTIC MODELS:
```python
from pydantic import BaseModel, Field, field_validator
from enum import Enum
from typing import List, Optional

class Ai_Field(str, Enum):
    GENERATIVE_AI = "Generative AI"
    MACHINE_LEARNING = "Machine learning"
    PREDICTIVE_ANALYTICS = "Predictive analytics"
    COMPUTER_VISION = "Computer vision & image processing"
    RULE_BASED = "Rule-based systems"
    OTHER = "Other"

class Domain(str, Enum):
    HEALTHCARE = "Healthcare & wellbeing"
    AUTOMOTIVE = "Automotive"
    CONSTRUCTION = "Construction"
    MANUFACTURING = "Manufacturing"
    CULTURAL = "Cultural & creative industries"
    DEFENSE = "Defense"
    EDUCATION = "Education & training"
    ENVIRONMENT = "Environment & sustainability"
    FINANCE = "Finance"
    LEGAL = "Legal"
    SECURITY = "Security"
    SMART_CITIES = "Smart cities"
    TRANSPORT = "Transport, mobility, logistics"
    TRAVEL = "Travel & tourism"
    BUSINESS_DEVELOPMENT_BUSINESS_SERVICES_REAL_ESTATE_PROPERTY = "Business development/business services, Real estate & property"
    ARTS = "Arts & entertainment"
    OTHER = "Other"

class testInfo(BaseModel):
    company: str = Field(..., description='name of the company')
    experts: str = Field(..., description='name of the experts')
    ai_field: Ai_Field = Field(..., description="he primary AI field the company is using or planning to use. Choose ONE from:\n        - Generative AI: Content generation (text, images, audio, code), large language models, retrieval augment generation, chatbots, text-to-speech, speech-to-text, model context protocol, AI agents\n        - Machine learning: Traditional ML algorithms, neural networks, deep learning, clustering, classification, pattern recognition\n        - Predictive analytics: Statistical algorithms for forecasting, trend analysis, predictive modeling based on historical data\n        - Computer vision & image processing: Image processing, image recognition, object detection, obejct tracking, facial recognition, image segmentation, image description or labeling, video analysis, eye-tracking\n        - Rule-based systems: Predefined rules, logic, knowledge bases, expert systems, decision trees, rule-based reasoning\n        - Other: AI field that doesn't clearly fit into any of the above categories")
    domain: Domain = Field(..., description="The primary industry domain the company belongs to. Choose ONE from:\n        - Healthcare & wellbeing: Medical, healthcare, wellness, fitness, health services, diagnostics, devices, mental health\n        - Automotive: Car manufacturers, parts suppliers, automotive software, autonomous vehicles\n        - Construction: Building construction, architecture, civil engineering, construction materials, planning\n        - Manufacturing: Physical goods production, industrial production, factories, automation\n        - Cultural & creative industries: Design, publishing, media production, art, cultural heritage, creative content\n        - Defense: Military, defense technologies, security forces, governmental defense\n        - Education & training: Educational services, training, e-learning platforms, educational content, academic tools\n        - Environment & sustainability: Environmental protection, sustainability, renewable energy, conservation, climate monitoring\n        - Finance: Banking, insurance, fintech, investment, accounting, financial services\n        - Legal: Legal services, legal tech, compliance tools, regulatory assistance\n        - Security: Cybersecurity, physical security, surveillance, identity verification, threat detection\n        - Smart cities: Urban infrastructure technologies, city planning, urban monitoring, smart city initiatives\n        - Transport, mobility, logistics: Transportation services, logistics, supply chain, shipping, freight, mobility\n        - Travel & tourism: Travel industry, tourism, hospitality, booking services, travel planning\n        - Business development/business services: B2B services, consulting, business optimization, productivity tools\n        - Real estate & property: Property management, real estate services, property development, facility management\n        - Arts & entertainment: Entertainment, media, gaming, arts, leisure sectors\n        - Other: Companies that don't clearly fit into any of the above categories")
    intended_ai_idea: str = Field(..., description="Brief description (one phrase not exceeding a few words) of the company's proposed or intended AI solution. Examples: 'AI-based healthcare app for lifestyle recommendations', 'AI-based language learning platform', 'Computer vision system for quality control', etc.")
    recommendations: str = Field(..., description='A very brief summary of the recommendations, not exceeding a few phrases. ')
```

CRITICAL EXTRACTION RULES:
1. ACCURACY & VERIFICATION:
   - Extract information ONLY from the provided text
   - Never fabricate, infer, or guess any information
   - Use 'n/a' for any fields where information is not explicitly stated
   - Verify all extracted data against the source text
   - Maintain exact values, dates, and numerical figures as written

2. DATA HANDLING:
   - For dates: Use DD-MM-YYYY format when possible
   - For numbers: Preserve original precision and units
   - For text: Maintain original spelling and capitalization
   - For lists: Extract all relevant items, remove duplicates
   - For enums: Choose ONLY from the specified options
   - For the extracted fields whose length exceeds 30 words, summarize their text into less than 30 words comprising very brief key phrases separated by semi-colon.

3. FIELD VALIDATION:
   - Enum fields must match one of the specified values exactly
   - List fields should contain valid, non-empty items
   - Numerical fields should be valid numbers in correct format

4. QUALITY ASSURANCE:
   - Double-check all extracted information against source
   - Ensure no information is duplicated across fields
   - Verify that field types match the expected data types
   - Confirm that all required fields are addressed
   - Validate that enum selections are from available options


OUTPUT FORMAT:
Return the extracted information as a JSON object that exactly matches the testInfo structure shown above.

CRITICAL: All JSON field names MUST be in snake_case format (lowercase with underscores) to match the model exactly.
For example: "due_date", "bank_name", "car_type" - NOT "Due date", "bank name", "car type"

Example output structure:
```json
{
  "field_name_1": "extracted_value_or_n/a",
  "field_name_2": ["list", "of", "values"],
  "field_name_3": "enum_option_or_n/a"
}
```

VALIDATION CHECKLIST:
Before returning your response, verify:
- All required fields are populated or marked 'n/a'
- All enum fields contain valid options only
- All numerical fields contain valid numbers
- All date fields follow proper format
- No information is fabricated or inferred
- JSON structure matches the model exactly
- Field names match the model exactly
- Data types are appropriate for each field

FINAL INSTRUCTIONS:
- Process the document systematically
- Extract information field by field as specified above
- Maintain accuracy over completeness
- When in doubt, use 'n/a' rather than guessing
- Return only the JSON object with extracted data
- Ensure the output can be parsed as valid JSON
"""

def get_extraction_prompt():
    """Return the complete extraction prompt with embedded models"""
    return EXTRACTION_PROMPT
